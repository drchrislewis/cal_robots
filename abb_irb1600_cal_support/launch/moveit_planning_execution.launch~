<launch>
  <!-- The planning and execution components of MoveIt! configured to run -->
  <!-- using the ROS-Industrial interface. -->
 
  <!-- the "sim" argument controls whether we connect to a Simulated or Real robot -->
  <!--  - if sim=false, a robot_ip argument is required -->
  <arg name="sim" default="false" />
  <arg name="robot_ip" default="192.168.125.1" unless="$(arg sim)" />

  <!-- By default, we do not start a database (it can be large) -->
  <arg name="db" default="false" />
  <!-- Allow user to specify database location -->
  <arg name="db_path" default="$(find abb_irb1600_6_12_moveit_config)/default_warehouse_mongo_db" />

  <!-- load the robot_description parameter before launching ROS-I nodes -->
  <include file="$(find abb_irb1600_6_12_moveit_config)/launch/planning_context.launch" >
    <arg name="load_robot_description" value="true" />
  </include>

  <!-- run the robot simulator and action interface nodes -->
  <group if="$(arg sim)">
    <include file="$(find industrial_robot_simulator)/launch/robot_interface_simulator.launch" />
  </group>

  <!-- run the "real robot" interface nodes -->
  <!--   - this typically includes: robot_state, motion_interface, and joint_trajectory_action nodes -->
  <!--   - replace these calls with appropriate robot-specific calls or launch files -->
  <group unless="$(arg sim)">
    <include file="$(find abb_irb1600_cal_support)/launch/robot_interface_download_irb1600_6_12.launch" >
      <arg name="robot_ip" value="$(arg robot_ip)"/>
    </include>
  </group>

  <!-- publish the robot state (tf transforms) -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />

  <include file="$(find abb_irb1600_6_12_moveit_config)/launch/move_group.launch">
    <arg name="publish_monitored_planning_scene" value="true" />
  </include>

  <include file="$(find abb_irb1600_6_12_moveit_config)/launch/moveit_rviz.launch">
    <arg name="config" value="true"/>
  </include>
  
  <!-- If database loading was enabled, start mongodb as well -->
  <include file="$(find abb_irb1600_6_12_moveit_config)/launch/default_warehouse_db.launch" if="$(arg db)">
    <arg name="moveit_warehouse_database_path" value="$(arg db_path)"/>
  </include>

  <!-- if there is no calibration node, then we might want to display the targets anyway 
  <node pkg="industrial_extrinsic_cal" type="target_display" name="target_display_node" output="screen" >
    <param name="target_yaml_file" value="$(find abb_irb1600_cal_support)/yaml/abb_targets.yaml" />
  </node>
  -->
  
  <!-- publish the joint states associated with transforms that might be calibrated-->
  <node name="mutable_joint_state_publisher" pkg="industrial_extrinsic_cal" type="mutable_joint_state_publisher" output="screen">
     <!-- This node takes as an argument a 'mutable_joint_states_yaml_file'
          It also publishes on the topic /joint_states so be sure to remap to a namespaced topic 
          which tells the publisher the state of the to-be-calibrated joints -->
     <param name="mutable_joint_state_yaml_file" value="$(find abb_irb1600_cal_support)/yaml/mutable_joint_states.yaml" />
     <remap from="joint_states" to="/mutable_joint_states"/>
     <param name="overwrite_mutable_values" value="true"/>
  </node>

  <!-- joint state publisher which combines the mutable and the real joint states for the scene -->
  <node name="combined_joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" >
     <!-- joint_state_publisher will forward joints it recieves on the topics specified in the 'source_list' parameter -->
     <rosparam param="source_list">[abb/joint_states, mutable_joint_states]</rosparam>
     <param name="publish_default_velocities" value="true" />
     <param name="publish_default_efforts" value="true" />
     <param name="publish_default_positions" value="true" />
  </node>


  <!-- the asus sensor attached to the wrist 
  <include file="$(find industrial_extrinsic_cal)/launch/single_sensor.launch" >
    <arg name="arm_prefix" default="asus"/>
    <arg name="camera_name" default="asus"/>    
    <arg name="device_id" default="#1" />
    <arg name="publish_tf" default="false" />
    <arg name="rgb_camera_info_url" default="file://$(find abb_irb1600_cal_support)/yaml/asus_camera_info.yaml"/>
  </include>
  -->

  <!--	
  <include file="$(find abb_irb1600_cal_support)/launch/ifm_camera.launch"/>
  -->

  <!-- start the stereo localization node along with its cameras -->
  <include file="$(find abb_irb1600_cal_support)/launch/stereo_cameras.launch"/>

  <!-- ros_robot_trigger_action allows the robot to finish moving before the scene is triggered -->
  <node pkg="industrial_extrinsic_cal" type="ros_robot_trigger_action_service" name="rosRobotSceneTrigger" />

  <!-- the extrinsic calibration service node for asus 
  <node pkg="industrial_extrinsic_cal" type="service_node" name="calibration_service_node" output="screen" >
      <param name="yaml_file_path" value="$(find abb_irb1600_cal_support)/yaml/" />
      <param name="store_result_package_name" value="$(find abb_irb1600_cal_support)/yaml" />
      <param name="camera_file" value="asus.yaml" />
      <param name="target_file" value="m10x10_np.yaml" />
      <param name="cal_job_file" value="abb_caljob.yaml" />
      <param name="post_proc_on" value="false" />
      <param name="observation_data_file" value="abb_observations.yaml" />
      <param name="results_file" value="abb_results.yaml" />
   </node>
  -->

  <!-- the extrinsic calibration service node for basler stereo pair -->
  <node pkg="industrial_extrinsic_cal" type="service_node" name="calibration_service_node" output="screen" >
      <param name="yaml_file_path" value="$(find abb_irb1600_cal_support)/yaml/" />
      <param name="store_result_package_name" value="$(find abb_irb1600_cal_support)/yaml" />
      <param name="camera_file" value="abb_cameras.yaml" />
      <param name="target_file" value="abb_targets.yaml" />
      <param name="cal_job_file" value="abb_basler_caljob.yaml" />
      <param name="post_proc_on" value="false" />
      <param name="observation_data_file" value="abb_observations.yaml" />
      <param name="results_file" value="abb_results.yaml" />
      <param name="end_effector_link_name" value="tool0" />
      <param name="pose_ref_frame_name" value="world"/>
   </node>

  <!-- start yak with asus 
  <include file="$(find abb_irb1600_cal_support)/launch/abb_yak.launch">
     <arg name="color_image"   value="/asus/rgb/image_rect_color"/>
     <arg name="depth_image"   value="/asus/depth/image_raw"/>
     <arg name="base_frame"    value="world"/>
     <arg name="camera_frame"  value="/asus_ir_optical_frame"/>	
  </include>
  -->
  
  <!-- start yak with ifm 
  <include file="$(find abb_irb1600_cal_support)/launch/abb_yak.launch">
     <arg name="color_image"   value="/o3d3xx/camera/raw_amplitude"/>
     <arg name="depth_image"   value="/o3d3xx/camera/depth"/>
     <arg name="base_frame"    value="world"/>
     <arg name="camera_frame"  value="ifm_optical_frame"/>	
  </include>
  -->

  <!-- start yak meshing 
  <node name="meshing" pkg="yak_meshing" type="yak_meshing_node" output="screen">
    <param name="output_path" value="$(find abb_irb1600_cal_support)/meshes/yak"/>
  </node>
  -->

</launch>
